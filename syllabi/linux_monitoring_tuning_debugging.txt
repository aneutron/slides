Monitoring Tuning and Debugging in the Linux environment
========================================================
Description: This course is intended for developers who wish to monitor or debug
their apps on a Linux system, tune their Linux system to their needs, Modify
the boot process and more.

Objectives:
- Gain an in-depth understanding of how Linux works.
- Learn how to tune the system.
- Learn how to tune your programming style so that you would use the system better.
- Learn how to tune your applications parameters to utilize the system better.
- Gain understanding of the most important topics dealing with writing real time apps on Linux.
- Review some of the most important monitoring tools available.
- Learn how to find problems using these monitoring tools.

Prerequisites:
- Knowledge of command line on Unix or Linux.
- C/C++ programming is a real advantage and a must for some of the advanced chapters.

What this course does not cover:
- writing scripts
- interacting with the shell
- login/logout
- using a debugger (local or remote)

Full duration (for all materials): 3 days

Topics
======
Kernel introduction (advanced chapter - only for developers, not for QA people)
	The definition of a kernel
	Basics of kernel implementation
	Kernel/userspace interface (syscalls, virtual filesystems, libc)
	How much do context switches cost?
	The Linux scheduler (OTHER, FIFO, RR)
	Different kernel contexts (passive, interrupt, kernel threads)
	Different userspace contexts (regular, signal)
Monitoring/Tuning/Debugging theory
	The 3 bottle necks: memory, CPU, IO
	IO division: network vs disk
	Difference between monitoring tools and benchmarking tools.
Monitoring processes
	Linux processes hierarchy
	init as parent of all
	bootup and shutdown
	parent/child relationship
	fork implementation (advanced)
	What are zombies? How do you identify them? How do you handle them?
	how does /proc work
	the /proc folder per app
	strace (standalone and attaching), mtrace, ltrace.
	What is a software watchdog?
	Writing a simple linux watchdog
	Using inittab for simple watchdogging
	kill -9 vs kill -15. What to use? Why? Could they fail?
Monitoring system memory
	top, ps and more
	How the OS allocates RAM
	Being not lazy in RAM allocation
	Swap (adding, removing, monitoring)
	To swap or not to swap
Monitoring cpu
	ps and it's many options
	How many CPUs do I have?
	What apps are running on what CPU?
	Controlling affinity of apps
	time(1) and understanding how the OS counts CPU time.
	Limiting apps resources
	top and it's many options
	How does the Linux scheduler work? nice(1), chrt(1)
Monitoring disk
	The mount paradigm
	using du and df correctly
	Difference between disk utilisation and logical size of files
	Seeing all open files of applications
	Controlling disk scheduling priority and class (ioprio).
	iotop(1) and iostat(1)
	sar(1) and other monitoring tools
	The different file systems linux supports
	Implications of file system selection on application performance.
	Controlling file system features.
	ram file systems (tmpfs, ...)
	loopback device.
	basic tools (/dev devices, fdisk, fsck, /etc/fstab)
Monitoring network
	netstat and it's many options
	Monitoring and controlling the OS network stack (/proc).
	ifconfig and it's many options
	monitoring the network interface (ethtool).
	ip(1) and it's many options
	Load balancing and failing over ethernet interfaces (bonding)
	Bridging network interfaces.
	vlans, tunnels, aliases.
	lo and what it's for?
	name resolution and it's problems.
	tap devices.
	routing
	tools (tcpdump, wireshark and more)
Monitoring the kernel (advanced)
	Seeing kernel threads in ps
	Examining interrupts
	Controlling affinity of interrupt handles
	Interrupt load balancing and irqbalance(1)
	Controlling affinity of kernel threads
	Modules: loading, unloading, monitoring
	kernel command line
	sysctl
	/proc and /sys for tuning the kernel
	udev + demo of udev.
	getting hw info: lspci, lsusb, dmidecode, ...
The boot process (advanced)
	The BIOS
	The bootloader
	Configuring grub
	Using other bootloaders (lilo, syslinux, uboot)
	Advantages and disadvantages of certain boot loaders
	The init process
	SysV init
	Upstart
	inittab and how it works
	initrd and initramfs
Embedded Linux systems (advanced)
	uboot in detail
	How embedded systems get built? (top down, bottom up)
	Quick review: ptxdist, buildroot, android, yocto, gentoo, distros
	busybox
	libc replacements
RPC (advanced)
	basics
	portmapper
	rpcgen
		options + direcives
		complex data structures
		example
